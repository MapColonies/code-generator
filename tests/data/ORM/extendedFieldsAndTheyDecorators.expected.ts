/* This file was auto-generated by MC-GENERATOR, DO NOT modify it manually */
/* eslint-disable import/exports-last, @typescript-eslint/ban-types, @typescript-eslint/no-inferrable-types */
import { Column, Entity, Index, Check } from "typeorm";
import { ProductType } from "mockPackage";
import { Polygon } from "geojson";

export const PRODUCT_TYPES = ["Orthophoto","OrthophotoBest","RasterAid"];

@Entity({ name: 'records' })
@Check('imagingTimeBeginUtc', '"imaging_time_begin_utc" < imagingTimeEndUTC')
export class Metadata {

    @Column({ name: 'product_id', type: 'text', nullable: false, collation: 'C.UTF-8' })
    @Index()
    @Check('productId', '"product_id" ~ "^[A-Za-z]{1}[A-Za-z0-9_]{0,62}$"')
    public productId!: string;

    @Column({ name: 'product_type', type: 'enum', nullable: false, collation: 'C.UTF-8', enumName: 'product_type_enum', enum: ['Orthophoto', 'OrthophotoBest', 'RasterAid'] })
    @Index()
    public productType!: ProductType;

    @Column({ name: 'product_type_with_variable_enum', type: 'enum', nullable: false, enumName: 'product_type_enum', enum: PRODUCT_TYPES })
    @Index({ spatial: true })
    public productTypeWithVariableEnum!: ProductType;

    @Column({ name: 'footprint', type: 'geometry', spatialFeatureType: 'Polygon', srid: 4326, nullable: false })
    @Index({ spatial: true })
    @Check('valid geometry', "ST_IsValid('footprint')")
    @Check('geometry extent', "Box2D('footprint') @Box2D(ST_GeomFromText('LINESTRING(-180 -90, 180 90)'))")
    public footprint!: Polygon;

    @Column({ name: 'source_resolution_meter', type: 'numeric', nullable: false })
    @Check('sourceResolutionMeter', '"source_resolution_meter" BETWEEN source_resolution_meter AND 78271.52')
    public sourceResolutionMeter!: number;

    @Column({ name: 'imaging_time_begin_utc', type: 'timestamp with time zone', nullable: false })
    @Index()
    @Check('imagingTimeBeginUtc', '"imaging_time_begin_utc" < now()')
    public imagingTimeBeginUTC!: Date;

    @Column({ name: 'product_version', type: 'text', nullable: false, collation: 'C.UTF-8' })
    @Check('productVersion', '"product_version" ~ "^[1-9]\\\\d*(\\\\.(0|[1-9]\\\\d?))?$"')
    public productVersion!: string;

    @Column({ name: 'product_type_imported', type: 'enum', nullable: false, enumName: 'product_type_enum', enum: ProductType })
    @Index({ spatial: true })
    public productTypeImported!: ProductType;
}
